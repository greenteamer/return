// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("ava").default;
var Curry = require("rescript/lib/js/curry.js");
var Reader = require("../return/core/Reader/Reader.bs.js");

Ava("Reader. Make addToOne program with deps", (function (ctx) {
        var addToOne = function (env) {
          return 1 + env | 0;
        };
        var partial_arg = Reader.make(addToOne);
        var program = function (param) {
          return Reader.run(partial_arg, param);
        };
        ctx.is(Curry._1(program, 5), 6, undefined);
      }));

Ava("Reader. Make addToOne with doubled deps deps", (function (ctx) {
        var addToOne = function (env) {
          return 1 + env | 0;
        };
        var doubleEnv = function (env) {
          return (env << 1);
        };
        var partial_arg = Reader.local(Reader.make(addToOne), doubleEnv);
        var program = function (param) {
          return Reader.run(partial_arg, param);
        };
        ctx.is(Curry._1(program, 5), 11, undefined);
      }));

Ava("Reader. AddToOne with local doubled env value", (function (ctx) {
        var addToOne = function (env) {
          return 1 + env | 0;
        };
        var doubleEnv = function (env) {
          return (env << 1);
        };
        var partial_arg = Reader.local(Reader.map(Reader.make(addToOne), (function (a) {
                    return (a << 1);
                  })), doubleEnv);
        var program = function (param) {
          return Reader.run(partial_arg, param);
        };
        ctx.is(Curry._1(program, 5), 22, undefined);
      }));

Ava("Reader. Pipe.", (function (ctx) {
        var addToOne = function (env) {
          return 1 + env.value | 0;
        };
        var $$double = function (a) {
          return (a << 1);
        };
        var logger = function (marker, a) {
          return Reader.make(function (env) {
                      var str = "\n    ðŸ‘‹ simple logger " + marker + "\n    value: " + String(a) + "\n    env.value: " + String(env.value) + "";
                      console.log(str);
                    });
        };
        var partial_arg = Reader.chainFirst(Reader.map(Reader.chainFirst(Reader.make(addToOne), (function (param) {
                        return logger("[first into callstack]", param);
                      })), $$double), (function (param) {
                return logger("[second into callstack]", param);
              }));
        var run = function (param) {
          return Reader.run(partial_arg, param);
        };
        ctx.is(Curry._1(run, {
                  value: 5
                }), 12, undefined);
      }));

var R;

exports.R = R;
/*  Not a pure module */
