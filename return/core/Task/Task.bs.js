// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function make(ta) {
  return /* Task */{
          _0: ta
        };
}

function run(ta) {
  return Curry._1(ta._0, undefined);
}

function map(ta, fab) {
  var ta$1 = ta._0;
  return /* Task */{
          _0: (async function (param) {
              var a;
              try {
                a = await Curry._1(ta$1, undefined);
              }
              catch (exn){
                return Pervasives.failwith("Wrong usage. Task can't fail.");
              }
              return Curry._1(fab, a);
            })
        };
}

function chain(ta, fab) {
  var ta$1 = ta._0;
  return /* Task */{
          _0: (async function (param) {
              try {
                var a = await Curry._1(ta$1, undefined);
                return await run(Curry._1(fab, a));
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn.RE_EXN_ID === Js_exn.$$Error) {
                  return Pervasives.failwith("[Task.chian] Wrong usage. Task can't fail. Use TaskEither instead.");
                }
                throw exn;
              }
            })
        };
}

function chainFirst(ta, fab) {
  var ta$1 = ta._0;
  return /* Task */{
          _0: (async function (param) {
              try {
                var a = await Curry._1(ta$1, undefined);
                await run(Curry._1(fab, a));
                return a;
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn.RE_EXN_ID === Js_exn.$$Error) {
                  return Pervasives.failwith("[Task.chian] Wrong usage. Task can't fail. Use TaskEither instead.");
                }
                throw exn;
              }
            })
        };
}

var $$Promise;

exports.$$Promise = $$Promise;
exports.make = make;
exports.run = run;
exports.map = map;
exports.chain = chain;
exports.chainFirst = chainFirst;
/* No side effect */
